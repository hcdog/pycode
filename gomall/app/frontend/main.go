// Code generated by hertz generator.

package main

import (
	"context"
	"os"
	"time"

	"github.com/hcdog/pycode/gomall/app/frontend/biz/router"
	"github.com/hcdog/pycode/gomall/app/frontend/conf"
	"github.com/hcdog/pycode/gomall/app/frontend/middleware"
	"github.com/hcdog/pycode/gomall/app/frontend/infra/rpc"
	// "github.com/hcdog/pycode/gomall/app/user/biz/dal"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/pprof"
	"github.com/hertz-contrib/sessions"
	"github.com/hertz-contrib/sessions/redis"
	"github.com/joho/godotenv"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

func main() {
	// init dal
	// dal.Init()
	rpc.InitClient()
	_ = godotenv.Load()
	address := conf.GetConf().Hertz.Address
	h := server.New(server.WithHostPorts(address))

	registerMiddleware(h)

	// add a ping route to test
	// h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
	// 	ctx.JSON(consts.StatusOK, utils.H{"ping": "pong"})
	// })
	// add a singe in  route
	router.GeneratedRegister(h) //这个函数是确定路由，进入服务的关键GeneratedRegister->Register->POST
	h.LoadHTMLGlob("template/*")
	h.Static("/static", "./") //查找什么文件，在哪查找
	h.GET("/sign_in", func(ctx context.Context, c *app.RequestContext) {
		data := utils.H{
			"Title": "sign in",
			"next":  c.Request.Header.Get("Referer"),
		}
		c.HTML(consts.StatusOK, "sign-in", data)
	})
	h.GET("/sign_up", func(ctx context.Context, c *app.RequestContext) {
		c.HTML(consts.StatusOK, "sign-up", utils.H{"Title": "singe up"})
	})
	h.GET("/about", func(ctx context.Context, c *app.RequestContext) {
		c.HTML(consts.StatusOK, "about", utils.H{
			"title": "Error",
		})
	})
	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// redis
	store, _ := redis.NewStore(10, "tcp", "localhost:6379", "", []byte(os.Getenv("Session_secrct"))) //创建会话
	h.Use(sessions.New("go-mall", store))
	// log
	logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: time.Minute,
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())

	// auth 鉴权
	middleware.RegisterMiddleware(h)
}
